# Copyright (C) 2018 by eHealth Africa : http://www.eHealthAfrica.org
#
# See the NOTICE file distributed with this work for additional information
# regarding copyright ownership.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

from django.db import models
from django.db.models.signals import pre_delete
from django.dispatch import receiver
from django_prometheus.models import ExportModelOperationsMixin

from .couchdb_helpers import delete_user, generate_db_name


class Schema(ExportModelOperationsMixin('couchdbsync_schema'), models.Model):
    '''
    Keeps the relation between the Aether-mobile App JSON schema and the
    Aether Kernel submissions.

    :ivar text name: **unique** -- Schema name used by Aether-mobile App.
    :ivar UUID kernel_id: Kernel artefact ID bound to this schema.
    '''

    name = models.TextField(unique=True)

    # This ID is used to submit the Schema Couchdb documents to the linked
    # Aether Kernel artefact.
    # If the Schemas are linked to Mappings it's the mapping id,
    # else if they are linked to Mapping Sets the the mapping set id...
    # This value should be replaced every time the Kernel data model changes or
    # the relation between the App Schema and Kernel Artefact does.
    kernel_id = models.UUIDField()

    def __str__(self):
        return self.name

    class Meta:
        app_label = 'sync'
        default_related_name = 'schemas'
        ordering = ['name']


class MobileUser(ExportModelOperationsMixin('couchdbsync_mobileuser'), models.Model):
    '''
    List of granted google user accounts.

    If the device user account is not in this table, the device is not allowed to sync.

    :ivar text email: **unique** -- Validated google user email.
    '''

    email = models.EmailField(unique=True)

    def __str__(self):
        return self.email

    class Meta:
        app_label = 'sync'
        default_related_name = 'mobileusers'
        ordering = ['email']


class DeviceDB(ExportModelOperationsMixin('couchdbsync_devicedb'), models.Model):
    '''
    Keeps the device and its last successful sync import.

    :ivar text       device_id: **unique** -- Device id generated by Aether-mobile App.
    :ivar MobileUser mobileuser: Current mobile user.

    :ivar datetime   last_synced_date: Timestamp of the last successful sync import.
    :ivar text       last_synced_seq: CouchDB ``last_seq`` value of the last successful sync import.
    :ivar text       last_synced_log_message: Contains information about how many
        records were created/updated during the last successful sync import.
    '''

    device_id = models.TextField(unique=True)
    mobileuser = models.ForeignKey(
        to=MobileUser,
        on_delete=models.SET_NULL,
        blank=True,
        null=True,
    )

    # used to log the sync execution
    last_synced_date = models.DateTimeField(null=True)
    last_synced_seq = models.TextField(null=True, default='0')
    last_synced_log_message = models.TextField(null=True)

    @property
    def db_name(self):
        '''
        Returns the device's db name.
        '''
        return generate_db_name(self.device_id)

    def __str__(self):
        return self.device_id

    class Meta:
        app_label = 'sync'
        default_related_name = 'devices'
        ordering = ['-last_synced_date']


@receiver(pre_delete, sender=MobileUser)
def mobile_user_pre_delete(sender, instance, *args, **kwargs):
    '''
    When a Mobile User is deleted, delete the CouchDB users to revoke sync access
    '''

    devices = instance.devices.all()
    for device in devices:
        delete_user(device.device_id)
