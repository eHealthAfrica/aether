# Generated by Django 2.1.8 on 2019-04-05 07:37

from django.db import migrations, models
import django.db.models.deletion
import uuid


def migrate__update_mapping__many_to_many(apps, schema_editor):
    Mappings = apps.get_model('kernel', 'Mapping')
    for mapping in Mappings.objects.all():
        mapping.save()  # this updates the many-to-many relation


class Migration(migrations.Migration):

    dependencies = [
        ('kernel', '0101_name_not_unique'),
    ]

    operations = [
        # changing related name/verbose name in foreign keys
        migrations.AlterModelOptions(
            name='projectschema',
            options={
                'default_related_name': 'schemadecorators', 
                'ordering': ['project__id', '-modified'], 
                'verbose_name': 'schema decorator', 
                'verbose_name_plural': 'schema decorators',
            },
        ),
        migrations.AlterField(
            model_name='projectschema',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schemadecorators', to='kernel.Project', verbose_name='project'),
        ),
        migrations.AlterField(
            model_name='projectschema',
            name='schema',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schemadecorators', to='kernel.Schema', verbose_name='schema'),
        ),

        # remove old indices
        migrations.RemoveIndex(
            model_name='projectschema',
            name='kernel_proj_project_2dfa87_idx',
        ),
        migrations.RemoveIndex(
            model_name='projectschema',
            name='kernel_proj_modifie_3ecab4_idx',
        ),

        # rename database table name
        migrations.AlterModelTable(
            name='projectschema',
            table='kernel_schemadecorator',
        ),

        # RENAME MODEL!!!
        migrations.RenameModel(
            old_name='ProjectSchema',
            new_name='SchemaDecorator',
        ),
        
        # use default table name
        migrations.AlterModelTable(
            name='schemadecorator',
            table=None,
        ),

        # add new indices
        migrations.AddIndex(
            model_name='schemadecorator',
            index=models.Index(fields=['project', '-modified'], name='kernel_sche_project_49476e_idx'),
        ),
        migrations.AddIndex(
            model_name='schemadecorator',
            index=models.Index(fields=['-modified'], name='kernel_sche_modifie_7a154a_idx'),
        ),

        # update relationships
        migrations.RenameField(
            model_name='mapping',
            old_name='projectschemas',
            new_name='schemadecorators',
        ),
        migrations.AlterField(
            model_name='mapping',
            name='schemadecorators',
            field=models.ManyToManyField(blank=True, editable=False, related_name='mappings', to='kernel.SchemaDecorator', verbose_name='schema decorators'),
        ),

        migrations.RenameField(
            model_name='entity',
            old_name='projectschema',
            new_name='schemadecorator',
        ),
        migrations.AlterField(
            model_name='entity',
            name='schemadecorator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entities', to='kernel.SchemaDecorator', verbose_name='schema decorator'),
        ),

        # not sure if this is needed but... it doesn't hurt
        migrations.RunPython(
            code=migrate__update_mapping__many_to_many,
            reverse_code=migrations.RunPython.noop,
            # The optional elidable argument determines whether or not the operation
            # will be removed (elided) when squashing migrations.
            elidable=True,
        ),
    ]