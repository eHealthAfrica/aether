# ------------------------------------------------------------------------------
# Base settings for these containers:
#
#  * Databases + NGINX containers (use same settings in all files)
#  * Aether Kernel
#  * ODK Module
#  * CouchDB Sync Module
#  * Aether UI & UI Assets
#  * Zookeper & Kafka
#  * Aether Kafka Producer
#
# These container will be extended in the other DC files with dependencies and networks.
# Volumes and environment variables can be overriden in those files too.
# See more in: https://docs.docker.com/compose/extends/
# ------------------------------------------------------------------------------

version: "2.1"

services:

  # ---------------------------------
  # Database + NGINX containers
  # ---------------------------------

  postgres-base:
    image: postgres:9.6-alpine
    environment:
      PGUSER: postgres
    healthcheck:
      test: pg_isready
      interval: 2s
      timeout: 3s
      retries: 30

  couchdb-base:
    image: couchdb:1.7.2
    environment:
      COUCHDB_USER: ${COUCHDB_USER}
      COUCHDB_PASSWORD: ${COUCHDB_PASSWORD}
    volumes:
      # enable cors for mobile app in-browser development:
      - ./local-setup/couchdb/config.ini:/usr/local/etc/couchdb/local.ini
    ports:
      - "5984:5984"

  redis-base:
    image: redis:alpine
    command: "redis-server --requirepass ${REDIS_PASSWORD}"

  nginx-base:
    image: nginx:alpine
    volumes:
      # local setup
      - ./local-setup/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./local-setup/nginx/sites-enabled:/etc/nginx/sites-enabled

      # nginx log files
      - ./.persistent_data/nginx:/var/log/nginx

      # static folders per container
      - ./.persistent_data/static:/static

      # media folders per container
      - ./.persistent_data/media:/media
    ports:
      - "80:80"
      # needed for ODK behind nginx (ODK Collect only accepts 443 and 8443 ports)
      - "8443:8443"
    healthcheck:
      test: nginx -t
      interval: 5s
      timeout: 3s
      retries: 30


  # ---------------------------------
  # Aether Kernel
  # ---------------------------------

  kernel-base:
    image: aether-kernel
    build: ./aether-kernel
    stdin_open: true
    tty: true
    environment:
      # Uncomment this line to enable single sign on if you use CAS
      # CAS_SERVER_URL: https://your.cas.server

      CSRF_COOKIE_DOMAIN: .aether.local
      DEBUG: "true"
      DJANGO_SECRET_KEY: ${KERNEL_DJANGO_SECRET_KEY}
      DJANGO_STORAGE_BACKEND: filesystem
      HOSTNAME: kernel.aether.local

      APP_NAME: Aether Kernel

      ADMIN_USERNAME: ${KERNEL_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${KERNEL_ADMIN_PASSWORD}
      ADMIN_TOKEN: ${KERNEL_ADMIN_TOKEN}

      KERNEL_READONLY_DB_USERNAME: ${KERNEL_READONLY_DB_USERNAME}
      KERNEL_READONLY_DB_PASSWORD: ${KERNEL_READONLY_DB_PASSWORD}

      DB_NAME: aether
      PGHOST: db
      PGPASSWORD: ${KERNEL_DB_PASSWORD}
      PGPORT: 5432
      PGUSER: postgres

      CSV_SEPARATOR: ","

      WEB_SERVER_PORT: 8000
    volumes:
      - ./aether-kernel:/code

      # app version
      - ./tmp/VERSION:/code/VERSION
      - ./tmp/REVISION:/code/REVISION

      # media folder
      - ./.persistent_data/media/kernel:/media
      # static folder
      - ./.persistent_data/static/kernel:/var/www/static
      # temporary folder for Excel files
      - ./.persistent_data/export/kernel:/tmp
      # backup folder
      - ./.persistent_data/backups/kernel:/backups
    ports:
      - "8000:8000"
    command: start_dev


  # ---------------------------------
  # ODK module
  # ---------------------------------

  odk-base:
    image: aether-odk
    build: ./aether-odk-module
    stdin_open: true
    tty: true
    environment:
      # Uncomment this line to enable single sign on if you use CAS
      # CAS_SERVER_URL: https://your.cas.server

      CSRF_COOKIE_DOMAIN: .aether.local
      DEBUG: "true"
      DJANGO_SECRET_KEY: ${ODK_DJANGO_SECRET_KEY}
      DJANGO_STORAGE_BACKEND: filesystem
      HOSTNAME: odk.aether.local

      APP_NAME: Aether ODK

      ADMIN_USERNAME: ${ODK_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${ODK_ADMIN_PASSWORD}
      ADMIN_TOKEN: ${ODK_ADMIN_TOKEN}

      AETHER_KERNEL_TOKEN: ${KERNEL_ADMIN_TOKEN}
      AETHER_KERNEL_URL: http://kernel:8000
      AETHER_KERNEL_URL_TEST: http://kernel-test:9000

      DB_NAME: odk
      PGHOST: db
      PGPASSWORD: ${ODK_DB_PASSWORD}
      PGPORT: 5432
      PGUSER: postgres

      # behind ngnix
      WEB_SERVER_PORT: 8002
      # standalone (without nginx) (ODK Collect only accepts 443 and 8443 ports)
      # WEB_SERVER_PORT: 8443
    volumes:
      - ./aether-odk-module:/code

      # app version
      - ./tmp/VERSION:/code/VERSION
      - ./tmp/REVISION:/code/REVISION

      # media folder
      - ./.persistent_data/media/odk:/media
      # static folder
      - ./.persistent_data/static/odk:/var/www/static
      # backup folder
      - ./.persistent_data/backups/odk:/backups
    ports:
      # behind ngnix
      - "8002:8002"
      # standalone (without nginx)
      # - "8443:8443"
    command: start_dev


  # ---------------------------------
  # CouchDB Sync module
  # ---------------------------------

  couchdb-sync-base:
    image: aether-couchdb-sync
    build: ./aether-couchdb-sync-module
    stdin_open: true
    tty: true
    environment: &sync-environment
      # Uncomment this line to enable single sign on if you use CAS
      # CAS_SERVER_URL: https://your.cas.server

      CSRF_COOKIE_DOMAIN: .aether.local
      DEBUG: "true"
      DJANGO_SECRET_KEY: ${COUCHDB_SYNC_DJANGO_SECRET_KEY}
      DJANGO_STORAGE_BACKEND: filesystem
      HOSTNAME: sync.aether.local

      APP_NAME: Aether CouchDB-Sync

      ADMIN_USERNAME: ${COUCHDB_SYNC_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${COUCHDB_SYNC_ADMIN_PASSWORD}
      ADMIN_TOKEN: ${COUCHDB_SYNC_ADMIN_TOKEN}

      AETHER_KERNEL_TOKEN: ${KERNEL_ADMIN_TOKEN}
      AETHER_KERNEL_URL: http://kernel:8000
      AETHER_KERNEL_URL_TEST: http://kernel-test:9000

      GOOGLE_CLIENT_ID: ${COUCHDB_SYNC_GOOGLE_CLIENT_ID}

      COUCHDB_PASSWORD: ${COUCHDB_PASSWORD}
      COUCHDB_URL: http://couchdb:5984
      COUCHDB_USER: ${COUCHDB_USER}

      DB_NAME: couchdb-sync
      PGHOST: db
      PGPASSWORD: ${COUCHDB_SYNC_DB_PASSWORD}
      PGPORT: 5432
      PGUSER: postgres

      REDIS_DB: 0
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: 6379

      WEB_SERVER_PORT: 8006
    volumes: &sync-volumes
      - ./aether-couchdb-sync-module:/code

      # app version
      - ./tmp/VERSION:/code/VERSION
      - ./tmp/REVISION:/code/REVISION

      # static folder
      - ./.persistent_data/static/sync:/var/www/static
      # backup folder
      - ./.persistent_data/backups/sync:/backups
    ports:
      - "8006:8006"
    command: start_dev

  couchdb-sync-rq-base:
    image: aether-couchdb-sync
    environment: *sync-environment
    volumes: *sync-volumes
    command: start_rq


  # ---------------------------------
  # Aether UI
  # ---------------------------------

  ui-base:
    image: aether-ui
    build: ./aether-ui
    stdin_open: true
    tty: true
    environment:
      # Uncomment this line to enable single sign on if you use CAS
      # CAS_SERVER_URL: https://your.cas.server

      CSRF_COOKIE_DOMAIN: .aether.local
      DEBUG: "true"
      DJANGO_SECRET_KEY: ${UI_DJANGO_SECRET_KEY}
      DJANGO_STORAGE_BACKEND: filesystem
      HOSTNAME: ui.aether.local

      APP_NAME: Aether

      ADMIN_USERNAME: ${UI_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${UI_ADMIN_PASSWORD}

      AETHER_KERNEL_TOKEN: ${KERNEL_ADMIN_TOKEN}
      AETHER_KERNEL_URL: http://kernel:8000
      AETHER_KERNEL_URL_TEST: http://kernel-test:9000

      DB_NAME: ui
      PGHOST: db
      PGPASSWORD: ${UI_DB_PASSWORD}
      PGPORT: 5432
      PGUSER: postgres

      # use this value with "start_dev" command and webpack otherwise comment it out
      STATIC_ROOT: /code/aether/ui/assets/bundles
      WEB_SERVER_PORT: 8004
    volumes:
      - ./aether-ui:/code

      # app version
      - ./tmp/VERSION:/code/VERSION
      - ./tmp/REVISION:/code/REVISION

      # static folder
      - ./.persistent_data/static/ui:/var/www/static
      # backup folder
      - ./.persistent_data/backups/ui:/backups
    ports:
      - "8004:8004"
    command: start_dev

  ui-assets-base:
    build: ./aether-ui/aether/ui/assets
    stdin_open: true
    tty: true
    volumes:
      #################################################
      #                    WARNING                    #
      # do not include the root folder as volume or   #
      # `node_modules` folder will not be available   #
      #################################################

      # include all folders and root files manually :'(
      - ./aether-ui/aether/ui/assets/apps:/code/apps
      - ./aether-ui/aether/ui/assets/bundles:/code/bundles
      - ./aether-ui/aether/ui/assets/conf:/code/conf
      - ./aether-ui/aether/ui/assets/css:/code/css
      - ./aether-ui/aether/ui/assets/tests:/code/tests
      - ./aether-ui/aether/ui/assets/package.json:/code/package.json
    ports:
      - "3004:3004"
    command: start_dev


  # ---------------------------------
  # Kafka & Zookeeper
  # ---------------------------------

  zookeeper-base:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
    extra_hosts:
      - "moby:127.0.0.1"

  kafka-base:
    image: confluentinc/cp-kafka:latest
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      ADVERTISED_HOST_NAME: kafka
    extra_hosts:
      - "moby:127.0.0.1"


  # ---------------------------------
  # Aether Kafka Producer
  # ---------------------------------

  aether-producer-base:
    image: aether-producer
    build: ./aether-producer
    stdin_open: true
    volumes:
     - ./aether-producer:/code
     - ./VERSION:/code/VERSION
    environment:
      PYTHONUNBUFFERED: 1

      # These variables will override the ones indicated in the settings file
      KERNEL_URL: http://kernel:8000
      KERNEL_USERNAME: ${KERNEL_ADMIN_USERNAME}
      KERNEL_PASSWORD: ${KERNEL_ADMIN_PASSWORD}

      POSTGRES_HOST: db
      POSTGRES_DBNAME: aether
      POSTGRES_USER: ${KERNEL_READONLY_DB_USERNAME}
      POSTGRES_PASSWORD: ${KERNEL_READONLY_DB_PASSWORD}

      OFFSET_DB_HOST: db
      OFFSET_DB_USER: postgres
      OFFSET_DB_PORT: 5432
      OFFSET_DB_PASSWORD: ${KERNEL_DB_PASSWORD}
      OFFSET_DB_NAME: producer_offset_db

      PRODUCER_ADMIN_USER: ${PRODUCER_ADMIN_USER}
      PRODUCER_ADMIN_PW: ${PRODUCER_ADMIN_PW}
      SERVER_PORT: 5005

      # default settings file
      PRODUCER_SETTINGS_FILE: /code/producer/settings.json
    ports:
      - "5005:5005"
    command: start
