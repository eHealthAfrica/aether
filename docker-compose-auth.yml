version: '2.1'

networks:
  # docker network create aether_internal
  internal:
    external:
      # if this isn't explicitly set it inherits from the containing folder name (aether or not)
      name: aether_internal

volumes:
  # docker volume create aether_database_data
  database_data:
    external:
      name: aether_database_data

services:

  # ---------------------------------
  # Databases
  # ---------------------------------

  db:
    extends:
      file: ./docker-compose-base.yml
      service: postgres-base
    volumes:
      - database_data:/var/lib/postgresql/data
    networks:
      - internal

  kongpg:
    image: postgres:9.6-alpine
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD}
    healthcheck:
      test: pg_isready
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - internal

  keycloakpg:
    image: postgres:9.6-alpine
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${KEYCLOAK_PG_PASSWORD}
    networks:
      - internal


  # ---------------------------------
  # Authorization modules
  # ---------------------------------

  kong:
    image: kong:latest
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: db

      KONG_DATABASE: postgres
      KONG_PG_HOST: kongpg
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}

      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: 0.0.0.0:8090
    links:
      - kongpg:kongpg
    depends_on:
      kongpg:
        condition: service_healthy
    ports:
      - "8090:8090/tcp"
      # - "80:80/tcp"
      # - "8001:8001/tcp"  # internal only
      # - "8443:8443/tcp"  Once ODK is integrated, we can take these
      # - "8444:8444/tcp"
    networks:
      - internal

  keycloak:
    build: ./aether-auth/keycloak
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: keycloakpg
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: ${KEYCLOAK_PG_PASSWORD}

      KEYCLOAK_USER: ${KEYCLOAK_GLOBAL_ADMIN}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_GLOBAL_PASSWORD}

      PROXY_ADDRESS_FORWARDING: 'true'
      PROXY_PORT_FORWARDING: 'true'
    ports:
      - 8080:8080
    depends_on:
      - keycloakpg
    networks:
      - internal

  auth:
    build: ./aether-auth
    environment:
      BASE_HOST: ${BASE_HOST}
      KEYCLOAK_GLOBAL_ADMIN: ${KEYCLOAK_GLOBAL_ADMIN}
      KEYCLOAK_GLOBAL_PASSWORD: ${KEYCLOAK_GLOBAL_PASSWORD}
      KEYCLOAK_INTERNAL: ${KEYCLOAK_INTERNAL}
      KONG_INTERNAL: ${KONG_INTERNAL}
    volumes:
      - ./aether-auth:/code
    depends_on:
      kong:
        condition: service_started
      keycloak:
        condition: service_started
    command: start
    networks:
      - internal

  # ---------------------------------
  # Aether modules
  # ---------------------------------

  kernel:
    extends:
      file: ./docker-compose-base.yml
      service: kernel-base
    environment:
      # DEBUG: null
      APP_INTERNAL: http://kernel:8000
      BASE_HOST: ${BASE_HOST}
      CSRF_COOKIE_DOMAIN: aether.local
      HOSTNAME: ${BASE_HOST}/kernel
      KEYCLOAK_INTERNAL: ${KEYCLOAK_INTERNAL}
      KONG_INTERNAL: ${KONG_INTERNAL}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - internal
