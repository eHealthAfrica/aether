apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Release.Name }}
    chart: {{ template "kernel.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  progressDeadlineSeconds: 180
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        release: {{ .Release.Name }}
    spec:
      initContainers:
      - name: init
        image: postgres:9.3-alpine
        command: ['bash', '-c', './scripts/init.sh']
        env:
        - name: PGHOST
          valueFrom :
            secretKeyRef:
              name: database-credentials
              key: host
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: user
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: password
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.secret }}
              key: kernel-database-password
        - name: DB_USERNAME
          value: {{ .Values.app.rdsDbUser }}
        - name: DB_NAME
          value: {{ .Values.app.rdsDbName }}
        volumeMounts:
        - mountPath: /scripts
          name: init-config
        - mountPath: /media
          name: {{ .Release.Name }}-pvc
      containers:
      - name: nginx
        image: nginx:stable-alpine
        ports:
        - containerPort: {{ .Values.service.externalPort }}
        volumeMounts:
        - mountPath: /var/www/static
          name: static-assets-volume
        - mountPath: /etc/nginx/conf.d
          name: nginx-config
        - mountPath: /media
          name: {{ .Release.Name }}-pvc
      - name: kernel
        image: "{{ .Values.kernel.repository }}:{{ .Values.kernel.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args:
        - {{ .Values.app.command }}
        ports:
        - name: http
          containerPort: {{ .Values.app.port }}
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: X-Kubernetes-Health-Check
              value: livenessProbe
            - name: Host
              value: {{ .Release.Name }}.{{ .Values.domain }}
        readinessProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: X-Kubernetes-Health-Check
              value: readinessProbe
            - name: Host
              value: {{ .Release.Name }}.{{ .Values.domain }}
        env:
        - name: DEBUG
          value: {{ if .Values.debug }}"1"{{ else }}""{{ end }}
        - name: CAS_SERVER_URL
          value: {{ .Values.ums_url }}
        - name: CSRF_COOKIE_DOMAIN
          value: {{ .Release.Name }}.{{ .Values.domain }}
        - name: CSRF_TRUSTED_ORIGINS
          value: {{ .Release.Name }}.{{ .Values.domain }}
        - name: HOSTNAME
          value: {{ .Release.Name }}.{{ .Values.domain }}
        - name: DJANGO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.secret }}
              key: kernel-django-secret-key
        - name: ADMIN_USERNAME
          value: {{ .Values.app.admin_user }}
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.secret }}
              key: kernel-django-admin-password
        - name: ADMIN_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.secret }}
              key: admin-token
        - name: AETHER_KERNEL_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.secret }}
              key: kernel-token
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.secret }}
              key: kernel-database-password
        - name: PGUSER
          value: {{ .Values.database.user }}
        - name: PGPORT
          value: {{ quote .Values.database.port }}
        - name: PGHOST
          value: {{ .Values.database.host }}
        - name: DB_NAME
          value: {{ .Values.database.name }}
        - name: KERNEL_READONLY_DB_USERNAME
          value: {{ .Values.app.readonly_user }}
        - name: KERNEL_READONLY_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.secret }}
              key: kernel-readonly-db-password
        - name: TESTING
          value: {{ quote .Values.testing }}
        # `WEB_SERVER_PORT` is kept around for compatibility with the old tests,
        # which are using different ports in different environments. Once all
        # tests have been updated to run inside the cluster, `WEB_SERVER_PORT`
        # can be removed.
        - name: WEB_SERVER_PORT
          value: {{ quote .Values.app.port }}
        volumeMounts:
        - mountPath: /var/www/static
          name: static-assets-volume
        - name: {{ .Release.Name }}-pvc
          mountPath: {{ .Values.app.data_mount }}
      volumes:
      - name: {{ .Release.Name }}-pvc
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-pvc
      - name: static-assets-volume
        emptyDir: {}
      - name: nginx-config
        configMap:
          name: {{ .Release.Name }}-nginx-config
      - name: init-config
        configMap:
          name: {{ .Release.Name }}-init-config
          defaultMode: 0744
